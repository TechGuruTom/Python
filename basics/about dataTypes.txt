1. list 
What is list?
When to use list?
	Storing collections of items: Lists are often used to store collections of items, such as a list of names, a list of numbers, or a list of other objects.

	Iteration: Lists are easily iterable, which makes them a convenient choice for processing collections of items. For example, you might use a for loop to process each item in a list.

	Indexing: Lists allow you to access individual items by index, making it easy to retrieve specific items from the list.

	Slicing: Lists also allow you to extract sublists using slicing, which is useful when you need to work with a subset of items in a list.

	Modifying collections: Lists are mutable, which means you can modify their contents by adding, removing, or changing items.

	Representing sequences: Lists are often used to represent sequences of items, such as a list of steps to follow or a list of events.

	Implementing stacks and queues: Lists can be used to implement simple data structures, such as stacks and queues, by using append and pop methods.
Advantage of using list over others in python?
	Dynamic sizing: Lists can grow and shrink dynamically, making it easy to add or remove elements as needed.

	Order preservation: Lists preserve the order of elements, which makes them useful for representing sequences of items or collections that need to be processed in a specific order.

	Indexing and slicing: Lists support efficient access to individual elements or sublists using indexing and slicing, making it easy to extract specific items or sublists from a list.

	Mutability: Lists are mutable, which means you can modify their contents by adding, removing, or changing elements.

	Nesting: Lists can contain elements of any data type, including other lists, making them a good choice for representing hierarchical data structures.

	Iteration: Lists are iterable, which makes them a convenient choice for processing collections of items.

	Built-in functions: Python provides a range of built-in functions and methods for working with lists, such as sorting, reversing, and filtering, which can simplify your code.
When to avoid list?
	Large amounts of data: Lists can become slow when working with large amounts of data due to the overhead of resizing the list and the memory required to store the elements. In such cases, you might want to consider using an alternative data structure, such as arrays, or an external database.

	Key-value data: If you need to store key-value data, lists may not be the best choice as they do not provide an efficient way to access elements by key. In this case, dictionaries are a better choice as they allow you to access elements by key in constant time.

	Immutable data: If you need to represent data that should not be modified, lists may not be the best choice as they are mutable. In this case, tuples are a better choice as they are immutable and provide a way to represent fixed data structures.

	Performance-critical code: Lists have a high overhead compared to other data structures, such as arrays, due to their dynamic sizing and memory management. If performance is a critical factor, you might want to consider using arrays or other low-level data structures for specific performance-critical parts of your code.

	Complex data structures: If you need to represent complex data structures, such as trees or graphs, lists may not be the best choice as they don't provide an efficient way to represent relationships between elements. In these cases, you might want to consider using alternative data structures, such as linked lists, trees, or graphs.